export type MultiTargetVectorJoinCombination =
  | 'sum'
  | 'average'
  | 'minimum'
  | 'relative-score'
  | 'manual-weights';
export type MultiTargetVectorJoin = {
  combination: MultiTargetVectorJoinCombination;
  targetVectors: string[];
  weights?: Record<string, number>;
};
declare const _default: () => {
  sum: (targetVectors: string[]) => {
    combination: MultiTargetVectorJoinCombination;
    targetVectors: string[];
  };
  average: (targetVectors: string[]) => {
    combination: MultiTargetVectorJoinCombination;
    targetVectors: string[];
  };
  minimum: (targetVectors: string[]) => {
    combination: MultiTargetVectorJoinCombination;
    targetVectors: string[];
  };
  relativeScore: (weights: Record<string, number>) => {
    combination: MultiTargetVectorJoinCombination;
    targetVectors: string[];
    weights: Record<string, number>;
  };
  manualWeights: (weights: Record<string, number>) => {
    combination: MultiTargetVectorJoinCombination;
    targetVectors: string[];
    weights: Record<string, number>;
  };
};
export default _default;
export interface MultiTargetVector {
  sum: (targetVectors: string[]) => MultiTargetVectorJoin;
  average: (targetVectors: string[]) => MultiTargetVectorJoin;
  minimum: (targetVectors: string[]) => MultiTargetVectorJoin;
  relativeScore: (weights: Record<string, number>) => MultiTargetVectorJoin;
  manualWeights: (weights: Record<string, number>) => MultiTargetVectorJoin;
}
